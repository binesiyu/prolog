/*  
     solve_equation(Equation,Unknown,Solution) :-
	Solution is a solution to the equation Equation 
	in the unknown Unknown.
*/
	:- op(40,xfx,\).
	:- op(50,xfx,^).

    
     solve_equation(Equation,X,Solution) :-
        single_occurrence(X,Equation), 
	!,
        position(X,Equation,[Side|Position]),
        maneuver_sides(Side,Equation,Equation1),
        isolate(Position,Equation1,Solution).

/*  The isolation method  */

     maneuver_sides(1,Lhs = Rhs,Lhs = Rhs) :- !.
     maneuver_sides(2,Lhs = Rhs,Rhs = Lhs) :- !.

     isolate([N|Position],Equation,IsolatedEquation) :- 
	isolax(N,Equation,Equation1), 
	isolate(Position,Equation1,IsolatedEquation).
     isolate([],Equation,Equation).

     /* Axioms for Isolation	*/

isolax(1,-Lhs = Rhs,Lhs = -Rhs).			% Unary minus 

isolax(1,Term1+Term2 = Rhs,Term1 = Rhs-Term2).		% Addition
isolax(2,Term1+Term2 = Rhs,Term2 = Rhs-Term1). 		% Addition

isolax(1,Term1-Term2 = Rhs,Term1 = Rhs+Term2).		% Subtraction
isolax(2,Term1-Term2 = Rhs,Term2 = Term1-Rhs). 		% Subtraction

isolax(1,Term1*Term2 = Rhs,Term1 = Rhs/Term2) :- 	% Multiplication 
   Term2 \== 0.
isolax(2,Term1*Term2 = Rhs,Term2 = Rhs/Term1) :- 	% Multiplication 
   Term1 \== 0.

isolax(1,Term1/Term2 = Rhs,Term1 = Rhs*Term2) :- 	% Division
   Term2 \== 0.
isolax(2,Term1/Term2 = Rhs,Term2 = Term1/Rhs) :- 	% Division
   Rhs \== 0. 

isolax(1,Term1^Term2 = Rhs,Term1 = Rhs^(-Term2)).	% Exponentiation $$$ ^
isolax(2,Term1^Term2 = Rhs,Term2 = log(base(Term1),Rhs)). % Exponentiation

isolax(1,sin(U) = V,U = arcsin(V)).			% Sine
isolax(1,sin(U) = V,U = 180 - arcsin(V)).		% Sine
isolax(1,cos(U) = V,U = arccos(V)).			% Cosine
isolax(1,cos(U) = V,U = -arccos(V)).			% Cosine

/*	Utilities	*/

position(Term,Term,[]) :- !.
position(Sub,Term,Path) :-
        structure(Term), functor(Term,F,N), position(N,Sub,Term,Path), !.

position(N,Sub,Term,[N|Path]) :-
   arg(N,Term,Arg), position(Sub,Arg,Path).
position(N,Sub,Term,Path) :- 
   N > 1, N1 is N-1, position(N1,Sub,Term,Path).

single_occurrence(Subterm,Term) :-      
        occurrence(Subterm,Term,N), !, N=1.

occurrence(Term,Term,1) :- !.
occurrence(Sub,Term,N) :-
	structure(Term), !, functor(Term,F,M), occurrence(M,Sub,Term,0,N).
occurrence(Sub,Term,0) :- Term \== Sub.

occurrence(M,Sub,Term,N1,N2) :-
	M > 0, !, arg(M,Term,Arg), occurrence(Sub,Arg,N), N3 is N+N1,
		M1 is M-1, occurrence(M1,Sub,Term,N3,N2).
occurrence(0,Sub,Term,N,N).

